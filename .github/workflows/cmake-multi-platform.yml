# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build_arm:
    name: "Building for hardware"
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Debug, Release]

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/base/build" >> "$GITHUB_OUTPUT"

    - name: arm-none-eabi-gcc
      uses: ryanwinter/arm-none-eabi-gcc@master
      with:
        release: '10-2021.10'

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -DBUILD_ARM=ON -B ${{ steps.strings.outputs.build-output-dir }}
        -S ${{ github.workspace }}/base/src 

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Flash or deploy the firmware
      run: echo "Flashing or deploying firmware to hardware can be done here."
  
  build_host:
    name: "Build for host system"
    runs-on: ubuntu-latest

    steps:
      - name: Test step
        run: echo "Testing job 2"

      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/base/build_host" >> "$GITHUB_OUTPUT"
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -S ${{ github.workspace }}/base/src

  # build_host:
  #   name: "Building for tests"
  #   runs-on: ${{ matrix.os }}
  #
  #   strategy:
  #     # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
  #     fail-fast: false
  #
  #     # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
  #     matrix:
  #       os: [ubuntu-latest]
  #       build_type: [Debug, Release]
  #
  #   steps:
  #   - uses: actions/checkout@v4
  #
  #   - name: Set reusable strings
  #     # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
  #     id: strings
  #     shell: bash
  #     run: |
  #       echo "build-output-dir=${{ github.workspace }}/base/build_host" >> "$GITHUB_OUTPUT"
  #
  #   - name: Install necessary dependencies
  #       run: |
  #         sudo apt-get install -y gcc g++ cmake libgtest-dev
  #
  #   - name: Configure CMake
  #     # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
  #     # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
  #     run: >
  #       cmake -B ${{ steps.strings.outputs.build-output-dir }}
  #       -S ${{ github.workspace }}/base/src
  #
  #   - name: Build
  #     # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
  #     run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
  #
  #   - name: Test
  #     working-directory: ${{ steps.strings.outputs.build-output-dir }}
  #     # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
  #     # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
  #     run: ./build_host/my_test 
